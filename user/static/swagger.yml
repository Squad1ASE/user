openapi: 3.0.1
info:
  title: User Service API
  description: Users from GoOutSafe with Microservices
  version: "0.1"
servers:
- url: /
paths:
  /users:
    put:
      tags:
      - Users
      summary: Create new user
      operationId: views.user.create_user

      requestBody:
        description: New user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        200:
          description: New user created
          content:
            text/plain:
              schema:
                type: string
                example: User successfully created
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "User already exists"
                status: 409
                title: "Conflict"
                type: "about:blank"
        403:
          description: Forbidden, cannot create admin or health authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Only customer or restaurant owner profiles are allowed"
                status: 403
                title: "Forbidden"
                type: "about:blank"
    post:
      tags:
      - Users
      summary: Edit user informations
      operationId: views.user.edit_user

      requestBody:
        description: User to edit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_user_email:
                  $ref: '#/components/schemas/User/properties/email'
                current_user_old_password:
                  $ref: '#/components/schemas/User/properties/password'
                current_user_new_password:
                  $ref: '#/components/schemas/User/properties/password'
                user_new_phone:
                  $ref: '#/components/schemas/User/properties/phone'
      responses:
        200:
          description: User information changed
          content:
            text/plain:
              schema:
                type: string
                example: User successfully edited
        401:
          description: User current password is wrong or user doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Wrong password"
                status: 401
                title: "Unauthorized"
                type: "about:blank"
    get:
      tags:
      - Users
      summary: Get all user if not filtered by email
      operationId: views.user.get_users
      parameters:
      - name: email
        in: query
        description: User's email
        example: "myawesomeemail@awesome.com"
        schema:
          type: string
      responses:
        200:
          description: Return all users
          content:
            application/json:
              schema:
                type: array
                properties:
                  email:
                    $ref: '#/components/schemas/User/properties/email'
                  phone:
                    $ref: '#/components/schemas/User/properties/phone'
                  firstname:
                    $ref: '#/components/schemas/User/properties/firstname'
                  lastname:
                    $ref: '#/components/schemas/User/properties/lastname' 
        404:
          description: there are no user with this email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Wrong email. User doesn't exist"
                status: 404
                title: "Not Found"
                type: "about:blank"    
  /users/{user_id}:
    get:
      tags:
      - Users
      summary: Get user by ID
      operationId: views.user.get_user_by_ID
      parameters:
      - name: user_id
        in: path
        description: User's ID
        example: 1
        schema:
          type: integer
      responses:
        200:
          description: Return user with required ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: '#/components/schemas/User/properties/email'
                  phone:
                    $ref: '#/components/schemas/User/properties/phone'
                  firstname:
                    $ref: '#/components/schemas/User/properties/firstname'
                  lastname:
                    $ref: '#/components/schemas/User/properties/lastname' 
        404:
          description: there are no user with this ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Wrong ID. User doesn't exist"
                status: 404
                title: "Not Found"
                type: "about:blank"      
  /login:
    post:
        tags:
        - Users
        summary: Get information about user if credential are correct
        operationId: views.user.login

        requestBody:
          description: Get email and password
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: '#/components/schemas/User/properties/email'
                  password:
                    $ref: '#/components/schemas/User/properties/password'

        responses:
          200:
            description: Return id, email, phone, firstname, lastname, dateofbirth, role
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/User/properties/id'
                    email:
                      $ref: '#/components/schemas/User/properties/email'
                    phone:
                      $ref: '#/components/schemas/User/properties/phone'
                    firstname:
                      $ref: '#/components/schemas/User/properties/firstname'
                    lastname:
                      $ref: '#/components/schemas/User/properties/lastname'    
                    dateofbirth:
                      $ref: '#/components/schemas/User/properties/dateofbirth'  
                    role:
                      $ref: '#/components/schemas/User/properties/role' 
                    is_admin:
                      $ref: '#/components/schemas/User/properties/is_admin' 
                    is_anonymous:
                      $ref: '#/components/schemas/User/properties/is_anonymous' 
                    notification:
                      type: array
                      items:
                        $ref: '#/components/schemas/Notification' 


          404:
            description: User not found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  detail: "Wrong email or password"
                  status: 404
                  title: "Not Found"
                  type: "about:blank"
          401:
            description: User password is wrong
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
                example:
                  detail: "Wrong email or password"
                  status: 401
                  title: "Unauthorized"
                  type: "about:blank"
  /patient:
    get:
      tags:
      - Quarantine
      summary: Get patient's medical records (only health authority can do it)
      operationId: views.user.get_user_medical_record
      parameters:
      - name: email
        in: query
        description: User's email (patient)
        required: true 
        example: "myawesomeemail@awesome.com"
        schema:
          type: string
      responses:
        200:
          description: Return all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: '#/components/schemas/User/properties/email'
                  phone:
                    $ref: '#/components/schemas/User/properties/phone'
                  firstname:
                    $ref: '#/components/schemas/User/properties/firstname'
                  lastname:
                    $ref: '#/components/schemas/User/properties/lastname'
                  dateofbirth:
                    $ref: '#/components/schemas/User/properties/dateofbirth'
                  role:
                    $ref: '#/components/schemas/User/properties/role'
                  startdate:
                    $ref: '#/components/schemas/Quarantine/properties/startdate'
                  enddate:
                    $ref: '#/components/schemas/Quarantine/properties/enddate'
                  state:
                    type: string
                    example: patient next under observation
        403:
          description: healthy authority and admin aren't patients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Health authority and Admin aren't patients"
                status: 403
                title: "Forbidden"
                type: "about:blank"
        404:
          description: there are no patient with this email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Wrong email. Patient doesn't exist"
                status: 404
                title: "Not Found"
                type: "about:blank" 
    put:
      tags:
      - Quarantine
      summary: Mark a user as positive
      operationId: views.user.mark_positive

      parameters:
      - name: email
        in: query
        description: User's email (patient)
        required: true 
        example: "myawesomeemail@awesome.com"
        schema:
          type: string

      responses:
        200:
          description: Patient has been marked as positive
          content:
            text/plain:
              schema:
                type: string
                example: Patient has been marked as positive
        403:
          description: healthy authority and admin aren't patients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Health authority and Admin aren't patients"
                status: 403
                title: "Forbidden"
                type: "about:blank"
        404:
          description: a malicious opponent tried to exploit the endpoint or an error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                detail: "Something is not working. This email doesn't exist"
                status: 404
                title: "Not Found"
                type: "about:blank"
  /notification:  
    put:
      tags:
      - Notification
      summary: Create a new notification
      operationId: views.user.notification
      requestBody:
        description: Notification data
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  email:
                    type: string
                    example: "myawesomeemail@awesome.com"
                  notiftype:
                    type: string
                    example: "contact_with_positive"
                  message:
                    type: string
                    example: "On  DATE(X) you have been in contact with a positive. Get into quarantine!"
      responses:
        200:
          description: Create a new notification
          content:
            text/plain:
              schema:
                type: string
                example: Notification added

      

components:
  schemas:
    User:
      required:
      - id
      - email
      - phone
      - firstname
      - lastname
      - password
      - dateofbirth
      - role
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        email:
          maxLength: 64
          minLength: 1
          type: string
          description: User's email
          example: "myawesomeemail@awesome.com"
        phone:
          minLength: 5
          type: string
          description: User's phone number
          example: "55555"
        firstname:
          type: string
          description: User's first name
          example: "AwesomeFirstName"
        lastname:
          type: string
          description: User's last name
          example: "AwesomeLastName"
        password:
          minLength: 8
          type: string
          description: User's password
          example: "My@w3s0mePassword"
        dateofbirth:
          type: string
          description: User's birthdate
          example: "10/10/1990"
        role:
          type: string
          enum: ['customer', 'owner']
          description: User's role
          example: "customer"
        is_active:
          type: boolean
          description: User is an active account or is going to be deleted
          example: true
        is_admin:
          type: boolean
          description: User is admin or not
          example: false
        is_anonymous:
          type: boolean
          description: User is not logged in
          example: false
    Error:
      required:
      - detail
      - status
      - title
      - type
      type: object
      properties:
        detail:
          minLength: 1
          type: string
          description: Error detail
          readOnly: true
          example: "The server encountered an internal error and was unable to complete your request"
        status:
          minimum: 0
          type: integer
          description: Status code
          readOnly: true
          example: 500
        title:
          minLength: 1
          type: string
          description: Error title
          readOnly: true
          example: "Internal Server Error"
        type:
          minLength: 1
          type: string
          description: Error type
          readOnly: true
          example: "about:blank"
    Quarantine:
      required:
      - id
      - userid
      - startdate
      - enddate
      - inobservation
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier
          readOnly: true
          example: 123
        userid:
          type: integer
          description: User's id
          example: 123
        startdate:
          type: string
          description: Quarantine start date
          example: "15/10/2020"
        enddate:
          type: string
          description: Quarantine end date
          example: "29/10/2020"
        inobservation:
          type: boolean
          description: User is positive or not
          example: true
    Notification:
      required:
      - date
      - message
      type: object
      properties:
        date:
          type: string
          description: Notification date
          example: "25/11/2020"
        message:
          type: string
          description: The notification content
          example: "On 23/11/2020 you have been in contact with a positive. Get into quarantine!"